/*
Look-and-Say Sequence
Find the n’th term in Look-and-say (Or Count and Say) Sequence. The look-and-say sequence is the sequence of below integers:
1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, …

How is above sequence generated?
n’th term in generated by reading (n-1)’th term.

The first term is "1"

Second term is "11", generated by reading first term as "One 1" 
(There is one 1 in previous term)

Third term is "21", generated by reading second term as "Two 1"

Fourth term is "1211", generated by reading third term as "One 2 One 1" 

and so on
How to find n’th term?

Input: n = 3
Output: 21

Input: n = 5
Output: 111221

Algo:
The idea is simple, we generate all terms from 1 to n. First two terms are initialized
as “1” and “11”, and all other terms are generated using previous terms. To generate a 
term using previous term, we scan the previous term. While scanning a term, we simply 
keep track of count of all consecutive characters. For sequence of same characters, 
we append the count followed by character to generate the next term.
 
*/

#include<bits/stdc++.h>
using namespace std;



int main()
{

	
    // Declaring a string object
   
    string str="Hey how are you";//type 1
	string str1("Hey how are you");//type 2
	string str2;                   //type 3
	getline(cin,str2);
    cout<<str<<"\n";
	cout<<str1<<"\n";
	cout<<str2;
	

	//copy string
	
	string a="Hey";
	string b(a);//type 1
	string b=a;//type 2
	cout<<a<<"\n"<<b;


    //initialization of string char
   
	string str1="First string" ;	
	string str2(str1);
	// initialization by character with number of occurence
    string str3(5, '#');
 
    // initialization by part of another string
    string str4(str1, 6, 6); // from 6th index (second parameter)
                             // 6 characters (third parameter)
 
    // initialization by part of another string : iteartor version
    string str5(str2.begin(), str2.begin() + 5);
	cout<<str3<<"\n"<<str4<<"\n"<<str5<<"\n";
	/*
	o/p
	#####
	string
	First
	*/

//clear length and particular character   
   
    // clear function deletes all character from string
	string str4="String";
	string str6(str4);
    str4.clear();
 
    //  they work as synonyms length is preferred
    int len = str6.length();//type 1  
	int len = str6.size();//type 2
 
    cout << "Length of string is : " << len << endl;
 
    // a particular character can be accessed using 'at' or '[]' operator
    char ch = str6.at(2);//type 1 
	char ch = str6[2];//type 2
 
 
    cout << "third character of string is : " << ch << endl
	
	//first and last character

	string str="Hey how are you";
	char ch_f = str[0];
    char ch_b = str[str.length() - 1];
		
	// convert c-type string
	//c_str returns null terminated char array version of string
    string str6="String";
	const char* charstr = str6.c_str();
    printf("%s\n", charstr);//string

	//append
	string str="String";
    str.append(" extension");//type 1
	cout << str << endl;
    str += " extension";//type 2
	cout << str << endl;
	//type 3
	str.append(str, 0, 6);  // at 0th position 6 character
	cout << str << endl;
   
	/*
	o/p
	
	String extension
	String extension extension
	String extension extensionString
	*/
	
	 //  find returns index where pattern is found.
    //  Is pattern is not there it returns predefined constant npos
    //  whose value is -1
	string str6="string extension";
	string str4="string";
    if (str6.find(str4) != string::npos)
        cout << "str4 found in str6 at " << str6.find(str4)
             << " pos" << endl;//0
    else
        cout << "str4 not found in str6" << endl;
    //o/p
	//str4 found in str6 at 0 pos
	
	
	string str6="string extension";
	string str4="strings";
    if (str6.find(str4) != string::npos)
        cout << "str4 found in str6 at " << str6.find(str4)
             << " pos" << endl;//0
    else
        cout << "str4 not found in str6" << endl;
    //o/p
	//str4 not found in str6
	
	
	string str6="String";
	printf("%s\n", charstr);//$r
	const char* charstr = str6.c_str();
    printf("%s\n", charstr);//string
	
	  //  erase(a, b) deletes b character at index a
    str6.erase(7, 4);
    cout << str6 << endl;
 
    //  iterator version of erase
    str6.erase(str6.begin() + 5, str6.end() - 3);
    cout << str6 << endl;
 
    str6 = "This is a examples";
 
    //  replace(a, b, str)  replaces b character from a index by str
    str6.replace(2, 7, "ese are test");
 
    cout << str6 << endl;
	
	
	//  substr(a, b) function returns a substring of b length
    //  starting from index a
    cout << str6.substr(7, 3) << endl;
 
    //  if second argument is not passed, string till end is
    // taken as substring
    cout << str6.substr(7) << endl;
	
	
	
	return 0;
}


//Application

// C++ program to demonstrate uses of some string function
#include <bits/stdc++.h>
using namespace std;
 
// this function returns floating point part of a number-string
string returnFloatingPart(string str)
{
    int pos = str.find(".");
    if (pos == string::npos)
        return "";
    else
        return str.substr(pos + 1);//i.e pos+1 to end
}
 
// this function checks whether string contains all digit or not
bool containsOnlyDigit(string str)
{
    int l = str.length();
    for (int i = 0; i < l; i++)
    {
        if (str.at(i) < '0' || str.at(i) > '9')
            return false;
    }
    //  if we reach here all character are digits
    return true;
}
 
// this function replaces all single space by %20
// Used in URLS
string replaceBlankWith20(string str)
{
    string replaceby = "%20";
    int n = 0;
 
    // loop till all space are replaced
    while ((n = str.find(" ", n)) != string::npos )
    {
        str.replace(n, 1, replaceby);
        n += replaceby.length();
    }
    return str;
}
 
// driver function to check above methods
int main()
{
    string fnum = "23.342";
    cout << "Floating part is : " << returnFloatingPart(fnum) 
         << endl;
 
    string num = "3452";
    if (containsOnlyDigit(num))
        cout << "string contains only digit" << endl;
 
    string urlex = "google com in";
    cout << replaceBlankWith20(urlex) << endl;
 
    return 0;      
}
/*
Run on IDE
Output :

Floating part is : 342
string contains only digit
google%20com%20in
*/



